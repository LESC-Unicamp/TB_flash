import numpy as np

class Points:

    def __int__(self):
        pass

    @staticmethod
    def R32_R125(T):

        if T == 280:
            x = np.array([0.0, 0.350, 0.482, 0.650, 0.948, 1.0])
            y = np.array([0.0, 0.387, 0.520, 0.676, 0.947, 1.0])
            P = np.array([830000, 924000, 955000, 985000, 1017000, 1008000])

        elif T == 295:
            x = np.array([0.0, 0.347, 0.470, 0.653, 0.914, 0.948, 1.0])
            y = np.array([0.0, 0.387, 0.508, 0.676, 0.915, 0.947, 1.0])
            P = np.array([1272000.0, 1415000.0, 1461000.0, 1516000.0, 1559000.0, 1556000.0, 1515000.0])

        elif T == 310:
            x = np.array([0.0, 0.339, 0.465, 0.646, 0.915, 1.0])
            y = np.array([0.0, 0.373, 0.498, 0.672, 0.914, 1.0])
            P = np.array([1890000, 2080000, 2150000, 2227000, 2303000, 2329000])

        elif T == 325:
            x = np.array([0.0, 0.462, 0.644, 0.919, 1.0])
            y = np.array([0.0, 0.489, 0.661, 0.919, 1.0])
            P = np.array([2639000, 3058000, 3174000, 3297000, 3318000])

        elif T == 340:
            x = np.array([0.0, 0.740, 0.885, 0.919, 1.0])
            y = np.array([0.0, 0.749, 0.890, 0.919, 1.0])
            P = np.array([3629000, 4482000, 4572000, 4582000, 4572000])

        else:
            raise TypeError(f"There is no experimental points for R32+R125 in such condition\n"
                            f"The available conditions are:\n"
                            f"T ---> 280 K\n"
                            f"T ---> 295 K\n"
                            f"T ---> 310 K\n"
                            f"T ---> 325 K\n"
                            f"T ---> 340 K")

        return x, y, P

    @staticmethod
    def R32_R152(T):

        if T == 323.15:
            x = np.array([0, 0.1022, 0.2592, 0.3661, 0.5330, 0.6987, 0.8284, 0.9272, 1.0])
            y = np.array([0, 0.2551, 0.4634, 0.5754, 0.7187, 0.8278, 0.9042, 0.9594, 1.0])
            P = np.array([1146000, 1416000, 1775000, 2011000, 2331000, 2631000, 2853000, 3014000, 3091000]) #Pa

        elif T == 303.15:
            x = np.array([0, 0.1326, 0.4686, 0.5856, 0.7060, 0.7562, 0.8549, 0.9226, 1.0])
            y = np.array([0, 0.2570, 0.6485, 0.7478, 0.8292, 0.8648, 0.9203, 0.9535, 1.0])
            P = np.array([677000, 852000, 1297000, 1443000, 1573000, 1639000, 1765000, 1840000, 1918000]) #Pa

        else:
            raise TypeError(f"There is no experimental points for R32+R152 in such condition\n"
                            f"The available conditions are:\n"
                            f"T ---> 303.15 K\n"
                            f"T ---> 323.15 K")

        return x, y, P

    @staticmethod
    def Propane_Butane(T):

        if T == 323.15:
            P = np.array([557000, 618000, 743000, 878000, 971000, 1101000, 1222000, 1324000, 1448000, 1564000, 1602000, 1643000])
            x = np.array([0.054, 0.112, 0.226, 0.334, 0.426, 0.535, 0.634, 0.714, 0.808, 0.895, 0.922, 0.951])
            y = np.array([0.139, 0.254, 0.432, 0.563, 0.651, 0.732, 0.804, 0.853, 0.906, 0.95, 0.964, 0.978])

        else:
            raise TypeError(f"There is no experimental points for Propane_Butane in such condition\n"
                            f"The available conditions are:\n"
                            f"T ---> 323.15 K")
        return x, y, P

    @staticmethod
    def CO2_Butane(T):

        if T == 250:
            P = np.array([276000, 326000, 404900, 525300, 643300, 826700, 842500, 997000, 1010100, 1137600, 1264500,
                        1352700, 1417500, 1473400, 1476100, 1520300, 1576100, 1645100])
            x = np.array([0.0603, 0.0743, 0.0972, 0.133, 0.1728, 0.2407, 0.2459, 0.3144,0.3324, 0.4097, 0.5063,
                          0.578, 0.6356, 0.7003, 0.7171, 0.7639, 0.8229, 0.9024])
            y = np.array([0.8567, 0.8775, 0.9019, 0.9246, 0.9384, 0.9524, 0.9533, 0.9612, 0.9612,0.9673, 0.9715,
                          0.9746, 0.9768, 0.9789, 0.9794, 0.981, 0.9838, 0.988])

        else:
            raise TypeError(f"There is no experimental points for CO2+Butane in such condition\n"
                            f"The available conditions are:\n"
                            f"T ---> 250 K")
        return x, y, P

    @staticmethod
    def Ethylene_CO2(T):

        if T == 273.16:
            P = 101325*np.array([34.303, 35.53, 36.87, 38.35, 39.68, 40.92, 42.07, 42.62, 42.81, 42.85,
                          42.83, 42.58, 42.59, 42.19, 41.66, 40.88, 40.387])
            x = np.array([0.0, 0.039, 0.089, 0.155, 0.226, 0.316, 0.433, 0.526, 0.594, 0.667, 0.684,
                          0.725, 0.754, 0.817, 0.884, 0.952, 1.0])
            y = np.array([0.0, 0.056, 0.125, 0.202, 0.273, 0.355, 0.458, 0.539, 0.598, 0.666, 0.681,
                          0.721, 0.751, 0.809, 0.878, 0.950, 1.0])

        else:
            raise TypeError(f"There is no experimental points for Ethylene+CO2 in such condition\n"
                            f"The available conditions are:\n"
                            f"T --->  273.16K")
        return x, y, P

    @staticmethod
    def Methane_CO2(T):

        if T == 230:
            P = 1e6*np.array([0.892, 1.078, 1.453, 1.786, 2.092, 2.551, 2.916, 3.503, 3.968, 4.565, 5.116,
                              5.640, 5.885, 6.086, 6.353, 6.586, 6.663, 6.736, 6.901, 6.991])
            x = np.array([0.0000, 0.0070, 0.0221, 0.0365, 0.0503, 0.0730, 0.0920, 0.1269, 0.1577, 0.2042,
                          0.2560, 0.3171, 0.3416, 0.3805, 0.4187, 0.4523, 0.4762, 0.4952, 0.5407, 0.5814])
            y = np.array([0.0000, 0.1553, 0.3480, 0.4550, 0.5218, 0.5929, 0.6320, 0.6770, 0.7005, 0.7237,
                          0.7368, 0.7449, 0.7466, 0.7461, 0.7448, 0.7411, 0.7369, 0.7338, 0.7247, 0.7004])

        elif T == 270:
            P = 1e6*np.array([3.209, 3.558, 3.673, 3.883, 4.146, 4.506, 4.915, 5.851, 7.093, 7.868, 8.197, 8.282, 8.381])
            x = np.array([0.0000, 0.0151, 0.0198, 0.0305, 0.0377, 0.0504, 0.0724, 0.1154, 0.1834, 0.2407, 0.2696, 0.2803, 0.2995])
            y = np.array([0.0000, 0.0766, 0.1047, 0.1461, 0.1778, 0.2203, 0.2661, 0.3372, 0.3942, 0.4061, 0.3952, 0.3887, 0.3782])

        else:
            raise TypeError(f"There is no experimental points for Ethylene+CO2 in such condition\n"
                            f"The available conditions are:\n"
                            f"T --->  230K\n"
                            f"T --->  270K")
        return x, y, P

    @staticmethod
    def Methane_Decane(T):

        if T == 542.6:
            P = 101325*np.array([30.10, 50.31, 100.05, 125.02, 149.45])
            x = np.array([0.0946, 0.1706, 0.3508, 0.4440, 0.6682])
            y = np.array([0.6795, 0.7638, 0.8051, 0.7901, 0.7116])

        elif T == 582.9:
            P = 101325*np.array([30.24, 50.05, 70.25, 79.78, 85.23])
            x = np.array([0.0857, 0.1794, 0.2834, 0.3481, 0.4032])
            y = np.array([0.4133, 0.5476, 0.5749, 0.5646, 0.5177])

        else:
            raise TypeError(f"There is no experimental points for Ethylene+CO2 in such condition\n"
                            f"The available conditions are:\n"
                            f"T --->  542.6K\n"
                            f"T --->  582.9K")

        return x, y, P

    @staticmethod
    def Methane_Ethane_CO2(T, Pressure):

        P = [1150000, 1519976.32, 2529983.93, 3550022.7, 4560030.3, 5570037.9]

        x1 = {1150000: np.array([0.057, 0.043, 0.035, 0.025, 0.016, 0.009, 0.004, 0.002, 0.001, 0.001, 0.003, 0.004, 0.007, 0.021]),
              1519976.32: np.array([0.105, 0.090, 0.082, 0.076, 0.069, 0.061, 0.054, 0.054, 0.050, 0.048, 0.044, 0.040, 0.036, 0.033,0.028, 0.025, 0.023, 0.028]),
              2529983.93: np.array([0.232, 0.217, 0.200, 0.193, 0.178, 0.166, 0.155, 0.145, 0.126, 0.117, 0.088, 0.074, 0.072]),
              3550022.7: np.array([0.357, 0.347, 0.340, 0.325, 0.317, 0.309, 0.300, 0.291, 0.279, 0.269, 0.255, 0.238, 0.221, 0.197,0.164, 0.151, 0.130]),
              4560030.3: np.array([0.479, 0.466, 0.450, 0.428, 0.401, 0.380, 0.353, 0.333, 0.312, 0.243, 0.221, 0.204]),
              5570037.9: np.array([0.599, 0.581, 0.558, 0.503, 0.483, 0.441, 0.351, 0.325, 0.302])
              }

        x2 = {1150000: np.array([0.943, 0.899, 0.864, 0.813, 0.745, 0.674, 0.574, 0.487, 0.314, 0.247, 0.188, 0.136, 0.053, 0.000]),
              1519976.32: np.array([0.896, 0.852, 0.822, 0.792, 0.756, 0.701, 0.642, 0.635, 0.595, 0.570, 0.520, 0.477, 0.364, 0.319, 0.204, 0.110, 0.056, 0.000]),
              2529983.93: np.array([0.768, 0.722, 0.654, 0.627, 0.548, 0.478, 0.420, 0.356, 0.259, 0.216, 0.078, 0.009, 0.000]),
              3550022.7: np.array([0.643, 0.608, 0.595, 0.548, 0.515, 0.486, 0.456, 0.423, 0.369, 0.345, 0.301, 0.245, 0.199, 0.146, 0.072, 0.044, 0.000]),
              4560030.3: np.array([0.521, 0.487, 0.440, 0.380, 0.309, 0.252, 0.208, 0.172, 0.140, 0.049, 0.022, 0.000]),
              5570037.9: np.array([0.401, 0.357, 0.311, 0.199, 0.168, 0.115, 0.035, 0.014, 0.000])
              }

        y1 = {1150000: np.array([0.368, 0.274, 0.219, 0.161, 0.100, 0.063, 0.028, 0.013, 0.005, 0.015, 0.032, 0.051, 0.096, 0.194]),
              1519976.32: np.array([0.511, 0.437, 0.400, 0.369, 0.338, 0.300, 0.271, 0.272, 0.258, 0.248, 0.238, 0.227, 0.220, 0.220, 0.223, 0.250, 0.300, 0.377]),
              2529983.93: np.array([0.683, 0.638, 0.589, 0.573, 0.540, 0.523, 0.513, 0.510, 0.508, 0.510, 0.539, 0.579, 0.585]),
              3550022.7: np.array([0.764, 0.734, 0.722, 0.692, 0.677, 0.666, 0.655, 0.646, 0.637, 0.631, 0.616, 0.625, 0.624, 0.631, 0.648, 0.655, 0.679]),
              4560030.3: np.array([0.800, 0.774, 0.746, 0.720, 0.699, 0.689, 0.687, 0.687, 0.687, 0.695, 0.711, 0.720]),
              5570037.9: np.array([0.816, 0.785, 0.755, 0.719, 0.717, 0.718, 0.730, 0.735, 0.739])
              }

        y2 = {1150000: np.array([0.632, 0.604, 0.584, 0.554, 0.523, 0.491, 0.453, 0.420, 0.348, 0.311, 0.272, 0.226, 0.118, 0.000]),
              1519976.32: np.array([0.489, 0.467, 0.453, 0.439, 0.425, 0.403, 0.384, 0.381, 0.368, 0.359, 0.341, 0.317, 0.289, 0.272, 0.223, 0.154, 0.098, 0.000]),
              2529983.93: np.array([0.317, 0.295, 0.274, 0.264, 0.242, 0.221, 0.206, 0.187, 0.157, 0.142, 0.074, 0.012, 0.000]),
              3550022.7: np.array([0.236, 0.225, 0.221, 0.207, 0.197, 0.188, 0.180, 0.171, 0.155, 0.148, 0.140, 0.118, 0.105, 0.085, 0.051, 0.034, 0.000]),
              4560030.3: np.array([0.200, 0.188, 0.173, 0.153, 0.129, 0.113, 0.095, 0.083, 0.071, 0.031, 0.015, 0.000]),
              5570037.9: np.array([0.184, 0.169, 0.150, 0.099, 0.085, 0.059, 0.020, 0.009, 0.000])
              }

        if T == 230 and Pressure == 'all':
            Pressure = P[:]

        if T == 230 and set(Pressure).intersection(P):
            x, y, z = {}, {}, {}
            for j, pressure in enumerate(Pressure):
                x_list, y_list, z_list = [], [], []
                x3 = 1 - (x1[pressure] + x2[pressure])
                y3 = 1 - (y1[pressure] + y2[pressure])
                z1 = (x1[pressure] + y1[pressure]) / 2
                z2 = (x2[pressure] + y2[pressure]) / 2
                z3 = 1 - (z1 + z2)
                for i in range(len(x1[pressure])):
                    x_list.append(np.array([x1[pressure][i], x2[pressure][i], x3[i]]))
                    y_list.append(np.array([y1[pressure][i], y2[pressure][i], y3[i]]))
                    z_list.append(np.array([z1[i], z2[i], z3[i]]))

                x[pressure] = x_list
                y[pressure] = y_list
                z[pressure] = z_list

            return x, y, Pressure

        else:

            raise TypeError(f"There is no experimental points for CO2+Butane in such condition\n"
                            f"The available conditions are:\n"
                            f"T ---> 230 K\n"
                            f"P ---> 1150038.8 Pa\n"
                            f"P ---> 1519976.32 Pa\n"
                            f"P ---> 2529983.93 Pa\n"
                            f"P ---> 3550022.7 Pa\n"
                            f"P ---> 4560030.3 Pa\n"
                            f"P ---> 5570037.9 Pa")